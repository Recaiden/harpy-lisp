(fun {test condition expectation reason}
{
    (if (== condition expectation)
        {1}
	{do
	  (print "Test of" reason "- Got" condition "expected" expectation)
	  0
	}
    )
})

; Make sure 'IF' is even working
(if 0 {print "False is True, 0 is 1"} {})

(let {
  (do
  ( = {tests}
    {
; Confirm numeric comparisons
(test (> 1 2) 0 ">1")
(test (> 2 1) 1 ">2")
(test (> 2 2) 0 ">3")
(test (> 1.0 2) 0 ">4")
(test (> 2.1 2) 1 ">5")
(test (> 1.0 1.0) 0 ">6")

(test (< 1 2) 1 "<1")
(test (< 2 1) 0 "<2")
(test (< 2 2) 0 "<3")
(test (< 1.0 2) 1 "<4")
(test (< 2.1 2) 0 "<5")
(test (< 1.0 1.0) 0 "<6")

(test (>= 1 2) 0 ">=1")
(test (>= 2 1) 1 ">=2")
(test (>= 2 2) 1 ">=3")
(test (>= 1.0 2) 0 ">=4")
(test (>= 2.1 2) 1 ">=5")
(test (>= 1.0 1.0) 1 ">=6")

(test (<= 1 2) 1 "<=1")
(test (<= 2 1) 0 "<=2")
(test (<= 2 2) 1 "<=3")
(test (<= 1.0 2) 1 "<=4")
(test (<= 2.1 2) 0 "<=5")
(test (<= 1.0 1.0) 1 "<=6")

(test (== 1 2) 0 "==1")
(test (== 2 2) 1 "==2")
(test (== 1.0 2) 0 "==3")
(test (== 2.0 2) 1 "==4")
(test (== 1.0 1.0) 1 "==5")

(test (!= 1 2) 1 "!=1")
(test (!= 2 2) 0 "!=2")
(test (!= 1.0 2) 1 "!=3")
(test (!= 2.0 2) 0 "!=4")
(test (!= 1.0 1.0) 0 "!=5")
  })
  (print "Tests:" (sum tests) "/" (len tests) "passed")

  )}
)



